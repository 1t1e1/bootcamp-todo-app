{"version":3,"sources":["components/TodoAppTitle.js","components/TodoAppAdd.js","redux/actions.js","redux/types.js","components/TodoAppHeader.js","components/TodoAppListItem.js","components/TodoAppList.js","components/TodoApp.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["TodoAppTitle","Container","Row","Col","md","offset","TodoAppAdd","props","state","value","onSubmit","e","preventDefault","newContent","addTodo","setState","InputGroup","Input","type","placeholder","this","onChange","target","InputGroupAddon","addonType","Button","Component","mapDispatchToProps","content","payload","connect","TodoAppHeader","CardBody","CardTitle","CardSubtitle","toggleTodo","id","deleteTodo","completed","style","margin","onClick","CardText","width","padding","display","textDecoration","color","float","icon","faTrash","todos","todoReducer","map","todo","TodoApp","marginTop","xs","size","Card","React","App","className","Boolean","window","location","hostname","match","DEFAULT_STATE","Math","random","reducers","combineReducers","action","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c92722d9.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container, Row, Col } from 'reactstrap';\n\nconst TodoAppTitle = () => {\n    return (\n        <Container>\n          <Row>\n            <Col  md={{ offset: 4 }}>\n            <h1>\n              TODOS\n            </h1>\n            </Col>\n          </Row>\n        </Container>\n    );\n};\n\nexport default TodoAppTitle;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../redux/actions\";\nimport { Input, InputGroup, InputGroupText, InputGroupAddon, Button } from 'reactstrap';\n\nclass TodoAppAdd extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: \"\",\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <form\n                    onSubmit={(e) => {\n                        /// formun default davranisi olan sayfa yenileme ve post etmeyi engelliyorum\n                        e.preventDefault();\n                        // statete tuttugum inputu son degerini aliyorum\n                        const newContent = this.state.value;\n                        if (newContent) {\n                            this.props.addTodo(newContent);\n                            this.setState({ value: \"\" });\n                        }\n                    }}\n                >\n                  <InputGroup>\n                    <Input\n                        type=\"text\"\n                        placeholder=\"Todo Giriniz\"\n                        value={this.state.value}\n                        onChange={(e) => {\n                            this.setState({\n                                value: e.target.value,\n                            });\n                        }}\n                    />\n                    <InputGroupAddon addonType=\"append\">\n                        <Button type=\"submit\">Todo Ekle</Button>\n                    </InputGroupAddon>\n                  </InputGroup>\n              \n                </form>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    addTodo: addTodo,\n};\n\nexport default connect(null, mapDispatchToProps)(TodoAppAdd);\n","import { ADD_TODO, TOGGLE_TODO, DELETE_TODO } from \"./types\";\n\nexport const addTodo = (content) => {\n    return {\n        type: ADD_TODO,\n        payload: content,\n    };\n};\n\nexport const toggleTodo = (id) => {\n    return {\n        type: TOGGLE_TODO,\n        payload: id,\n    };\n};\n\nexport const deleteTodo = (id) => {\n    return {\n        type: DELETE_TODO,\n        payload: id,\n    };\n};\n","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\n","import React from \"react\";\nimport TodoAppTitle from \"./TodoAppTitle\";\nimport TodoAppAdd from \"./TodoAppAdd\";\nimport {  CardBody, CardTitle, CardSubtitle } from 'reactstrap';\n\nconst TodoAppHeader = (props) => {\n    return (\n        <div>\n          <CardBody>\n\n            <CardTitle>\n              <TodoAppTitle />\n            </CardTitle>\n\n            <CardSubtitle> \n              <TodoAppAdd />\n            </CardSubtitle>\n\n          </CardBody>\n        </div>\n    );\n};\n\nexport default TodoAppHeader;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { toggleTodo, deleteTodo } from \"../redux/actions\";\nimport { CardSubtitle, Button, CardText } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nconst TodoAppListItem = ({\n    content,\n    id,\n    completed,\n    toggleTodo,\n    deleteTodo,\n}) => {\n    return (\n        <CardSubtitle style={{ margin: \"20px\" }}\n              onClick={() => toggleTodo(id)}\n        >\n          <CardText\n              style={{\n                  width: \"200px\",\n                  margin: \"5px\",\n                  padding: \"5px\",\n                  display: \"inline\",\n                  textDecoration: completed ? \"line-through\" : \"initial\",\n              }}\n              // onClick={() => toggleTodo(id)}\n          >\n              {content}\n          {/* </CardText>\n          <CardText> */}\n          <Button color=\"danger\"\n              style={{\n                  // width: \"40px\",\n                  float: \"right\",\n              }}\n              onClick={() => {\n                  deleteTodo(id);\n              }}\n          >\n              <FontAwesomeIcon icon={faTrash} />\n          </Button>\n          </CardText>\n        </CardSubtitle>\n    );\n};\n\nconst mapDispatchToProps = {\n    toggleTodo: toggleTodo,\n    deleteTodo: deleteTodo,\n};\n\nexport default connect(null, mapDispatchToProps)(TodoAppListItem);\n","import React from \"react\";\nimport TodoAppListItem from \"./TodoAppListItem\";\nimport { connect } from \"react-redux\";\n\nconst TodoAppList = ({ todos }) => {\n    return (\n        <div>\n            {todos.map((todo) => {\n                return <TodoAppListItem {...todo} />;\n            })}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        todos: state.todoReducer,\n    };\n};\n\nexport default connect(mapStateToProps)(TodoAppList);\n","import React from \"react\";\nimport TodoAppHeader from \"./TodoAppHeader\";\nimport TodoAppList from \"./TodoAppList\";\nimport { Card , Col , Row} from 'reactstrap';\n\nclass TodoApp extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n          <div style={{\n            marginTop:\"30px\",\n          }}>\n            <Row>\n              <Col xs={{ size: 6, offset: 3 }}>\n                  <Card  >\n                    <TodoAppHeader />\n                    <TodoAppList />\n                  </Card>\n                </Col>\n              </Row>\n            </div>\n        );\n    }\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport TodoApp from \"./components/TodoApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_TODO, TOGGLE_TODO, DELETE_TODO } from \"./types\";\n\nconst DEFAULT_STATE = [\n    {\n        id: Math.random(),\n        completed: true,\n        content: \"decide what to learn\",\n    },\n    {\n        id: Math.random(),\n        completed: false,\n        content: \"learn react\",\n    },\n    {\n        id: Math.random(),\n        completed: false,\n        content: \"learn redux\",\n    },\n    {\n        id: Math.random(),\n        completed: true,\n        content: \"add delete function\",\n    },\n    {\n        id: Math.random(),\n        completed: false,\n        content: \"add edit function\",\n    },\n    {\n        id: Math.random(),\n        completed: false,\n        content: \"filter as completed, not comp & all\",\n    },\n    {\n        id: Math.random(),\n        completed: false,\n        content: \"css use UI library\",\n    },\n];\n\nexport const todoReducer = (state = DEFAULT_STATE, action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            return [\n                ...state,\n                {\n                    id: Math.random(),\n                    completed: false,\n                    content: action.payload,\n                },\n            ];\n        case TOGGLE_TODO:\n            return state.map((todo) => {\n                if (todo.id === action.payload) {\n                    return { ...todo, completed: !todo.completed };\n                }\n                return todo;\n            });\n        case DELETE_TODO:\n            return state.filter((todo) => todo.id !== action.payload);\n        default:\n            return state;\n    }\n};\n","import { todoReducer } from \"./reducers\";\nimport { combineReducers, createStore } from \"redux\";\n\nconst reducers = combineReducers({\n    todoReducer: todoReducer,\n});\n\nexport const store = createStore(reducers);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}